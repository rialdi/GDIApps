// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowProjectGDIApps.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SimpleOvertime")]
    public partial class SimpleOvertimeFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "SimpleOvertime.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "SimpleOvertime", "A short summary of the feature", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "EMPLOYEE_ID",
                        "NAME",
                        "POSITION_ID",
                        "POS_DEPT",
                        "SUPERIOR_NAME",
                        "SUPERIOR_POS",
                        "MOR_NAME",
                        "MOR_POS"});
            table12.AddRow(new string[] {
                        "0000007142",
                        "NASARUDDIN",
                        "FPOCR4",
                        "SMELTER FURNACE",
                        "0000005664 - MUJAHID LAOLA",
                        "E00124 - SUPV, FURNACE SHIFT D",
                        "0000008989 - REZA PRIBADI UMBARA",
                        "DPPGM5 - MGR, SMELTER FURNAC"});
#line 5
testRunner.Given("Exist Following Employees Data From Common Service", ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "EMPLOYEE_ID",
                        "FULL_NAME",
                        "USERNAME",
                        "EMAIL"});
            table13.AddRow(new string[] {
                        "0000007142",
                        "NASARUDIN",
                        "nzr150",
                        "nasarudin@vale.com"});
            table13.AddRow(new string[] {
                        "0000005664",
                        "MUJAHID LAOLA",
                        "mu3210",
                        "mujahid.laola@vale.com"});
            table13.AddRow(new string[] {
                        "0000008989",
                        "REZA PRIBADI UMBARA",
                        "rzp145",
                        "rezaumbara@vale.com"});
#line 8
testRunner.And("Exist Employee AD user information From Common Service", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "LookupType",
                        "LookupValue",
                        "LookupText"});
            table14.AddRow(new string[] {
                        "OT_REASON",
                        "01",
                        "Training"});
            table14.AddRow(new string[] {
                        "OT_REASON",
                        "02",
                        "Emergency"});
            table14.AddRow(new string[] {
                        "OT_REASON",
                        "03",
                        "Leave"});
#line 13
testRunner.And("Exist Lookup data in following", ((string)(null)), table14, "And ");
#line hidden
#line 19
testRunner.And("Todays date is \"20-jan-2022\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create Draft Claim by admin")]
        [NUnit.Framework.CategoryAttribute("tag1")]
        [NUnit.Framework.CategoryAttribute("mockCommonService")]
        public virtual void CreateDraftClaimByAdmin()
        {
            string[] tagsOfScenario = new string[] {
                    "tag1",
                    "mockCommonService"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Draft Claim by admin", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "UserName",
                            "Password"});
                table15.AddRow(new string[] {
                            "admin@email.com",
                            "p@55wOrd"});
#line 23
 testRunner.Given("following user is logged in as admin", ((string)(null)), table15, "Given ");
#line hidden
#line 26
 testRunner.And("user able to select date from 30 days ago until today", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "EMPLOYEE_ID",
                            "NAME",
                            "POS_DEPT"});
                table16.AddRow(new string[] {
                            "0000007142",
                            "NASARUDDIN",
                            "SMELTER FURNACE"});
#line 27
 testRunner.And("user able to select these following employee data", ((string)(null)), table16, "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "EMPLOYEE_ID",
                            "NAME"});
                table17.AddRow(new string[] {
                            "0000007142",
                            "NASARUDDIN"});
#line 30
 testRunner.When("User Create new Claim with date \"19-JAN-2022\" and selected employees are", ((string)(null)), table17, "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "OT_NUMBER",
                            "OT_DATE",
                            "OT_HOUR",
                            "OT_REASON",
                            "EMPLOYEE_ID",
                            "NAME",
                            "POS_DEPT",
                            "POSITION_ID",
                            "FIRST_APPROVER_ID",
                            "FIRST_APPROVER_NAME",
                            "SECONDARY_APPROVER_ID",
                            "SECONDARY_APPROVER_NAME"});
                table18.AddRow(new string[] {
                            "OTS-0000-01-22-7142",
                            "19-01-2022",
                            "<null>",
                            "<null>",
                            "0000007142",
                            "NASARUDDIN",
                            "SMELTER FURNACE",
                            "FPOCR4",
                            "0000005664",
                            "MUJAHID LAOLA",
                            "0000008989",
                            "REZA PRIBADI UMBARA"});
#line 33
 testRunner.Then("Exist following overtime data with status \"DRAFT\"", ((string)(null)), table18, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Label",
                            "Input"});
                table19.AddRow(new string[] {
                            "OT_HOUR",
                            "<null>"});
                table19.AddRow(new string[] {
                            "OT_REASON",
                            "<null>"});
#line 36
 testRunner.And("With following overtime data to be inputed for each overtime record", ((string)(null)), table19, "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Label",
                            "Input"});
                table20.AddRow(new string[] {
                            "OT_HOUR",
                            "4"});
                table20.AddRow(new string[] {
                            "OT_REASON",
                            "01"});
#line 40
 testRunner.When("User select an overtime with ot number \"OTS-0000-01-22-7142\" and do the following" +
                        " changes", ((string)(null)), table20, "When ");
#line hidden
#line 44
 testRunner.And("User Submit the overtime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "OT_NUMBER",
                            "OT_DATE",
                            "OT_HOUR",
                            "OT_REASON",
                            "EMPLOYEE_ID",
                            "NAME",
                            "POS_DEPT",
                            "POSITION_ID",
                            "FIRST_APPROVER_ID",
                            "FIRST_APPROVER_NAME",
                            "SECONDARY_APPROVER_ID",
                            "SECONDARY_APPROVER_NAME"});
                table21.AddRow(new string[] {
                            "OTS-0000-01-22-7142",
                            "19-01-2022",
                            "4",
                            "01",
                            "0000007142",
                            "NASARUDDIN",
                            "SMELTER FURNACE",
                            "FPOCR4",
                            "0000005664",
                            "MUJAHID LAOLA",
                            "0000008989",
                            "REZA PRIBADI UMBARA"});
#line 45
 testRunner.Then("Exist following overtime data with status \"WAITING FOR FIRST APPROVAL\"", ((string)(null)), table21, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Approval by First Approver")]
        public virtual void ApprovalByFirstApprover()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Approval by First Approver", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "EMPLOYEE_ID",
                            "FULL_NAME",
                            "USERNAME",
                            "EMAIL"});
                table22.AddRow(new string[] {
                            "0000005664",
                            "MUJAHID LAOLA",
                            "mu3210",
                            "mujahid.laola@vale.com"});
#line 51
 testRunner.Given("Following user is logged in as \"TEAMLEADER\" at Screen Approval", ((string)(null)), table22, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "OT_NUMBER",
                            "OT_DATE",
                            "OT_HOUR",
                            "OT_REASON",
                            "EMPLOYEE_ID",
                            "NAME",
                            "POS_DEPT",
                            "POSITION_ID",
                            "FIRST_APPROVER_ID",
                            "FIRST_APPROVER_NAME",
                            "SECONDARY_APPROVER_ID",
                            "SECONDARY_APPROVER_NAME"});
                table23.AddRow(new string[] {
                            "OTS-0000-01-22-7142",
                            "19-01-2022",
                            "4",
                            "01",
                            "0000007142",
                            "NASARUDDIN",
                            "SMELTER FURNACE",
                            "FPOCR4",
                            "0000005664",
                            "MUJAHID LAOLA",
                            "0000008989",
                            "REZA PRIBADI UMBARA"});
#line 54
 testRunner.And("Exist following overtime data with status \"WAITING FOR FIRST APPROVAL\"", ((string)(null)), table23, "And ");
#line hidden
#line 57
 testRunner.When("User Approve overtime with OT Number \"OTS-0000-01-22-7142\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "OT_NUMBER",
                            "OT_DATE",
                            "OT_HOUR",
                            "OT_REASON",
                            "EMPLOYEE_ID",
                            "NAME",
                            "POS_DEPT",
                            "POSITION_ID",
                            "FIRST_APPROVER_ID",
                            "FIRST_APPROVER_NAME",
                            "SECONDARY_APPROVER_ID",
                            "SECONDARY_APPROVER_NAME"});
                table24.AddRow(new string[] {
                            "OTS-0000-01-22-7142",
                            "19-01-2022",
                            "4",
                            "01",
                            "0000007142",
                            "NASARUDDIN",
                            "SMELTER FURNACE",
                            "FPOCR4",
                            "0000005664",
                            "MUJAHID LAOLA",
                            "0000008989",
                            "REZA PRIBADI UMBARA"});
#line 58
 testRunner.Then("Exist following overtime data with status \"WAITING FOR SECOND APPROVAL\"", ((string)(null)), table24, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Approval by Second approver")]
        public virtual void ApprovalBySecondApprover()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Approval by Second approver", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 62
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "EMPLOYEE_ID",
                            "FULL_NAME",
                            "USERNAME",
                            "EMAIL"});
                table25.AddRow(new string[] {
                            "0000008989",
                            "REZA PRIBADI UMBARA",
                            "rzp145",
                            "rezaumbara@vale.com"});
#line 63
 testRunner.Given("Following user is logged in as \"TEAMLEADER\" at Screen Approval", ((string)(null)), table25, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "OT_NUMBER",
                            "OT_DATE",
                            "OT_HOUR",
                            "OT_REASON",
                            "EMPLOYEE_ID",
                            "NAME",
                            "POS_DEPT",
                            "POSITION_ID",
                            "FIRST_APPROVER_ID",
                            "FIRST_APPROVER_NAME",
                            "SECONDARY_APPROVER_ID",
                            "SECONDARY_APPROVER_NAME"});
                table26.AddRow(new string[] {
                            "OTS-0000-01-22-7142",
                            "19-01-2022",
                            "4",
                            "01",
                            "0000007142",
                            "NASARUDDIN",
                            "SMELTER FURNACE",
                            "FPOCR4",
                            "0000005664",
                            "MUJAHID LAOLA",
                            "0000008989",
                            "REZA PRIBADI UMBARA"});
#line 66
 testRunner.And("Exist following overtime data with status \"WAITING FOR SECOND APPROVAL\"", ((string)(null)), table26, "And ");
#line hidden
#line 69
 testRunner.When("User Approve overtime with OT Number \"OTS-0000-01-22-7142\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "OT_NUMBER",
                            "OT_DATE",
                            "OT_HOUR",
                            "OT_REASON",
                            "EMPLOYEE_ID",
                            "NAME",
                            "POS_DEPT",
                            "POSITION_ID",
                            "FIRST_APPROVER_ID",
                            "FIRST_APPROVER_NAME",
                            "SECONDARY_APPROVER_ID",
                            "SECONDARY_APPROVER_NAME"});
                table27.AddRow(new string[] {
                            "OTS-0000-01-22-7142",
                            "19-01-2022",
                            "4",
                            "01",
                            "0000007142",
                            "NASARUDDIN",
                            "SMELTER FURNACE",
                            "FPOCR4",
                            "0000005664",
                            "MUJAHID LAOLA",
                            "0000008989",
                            "REZA PRIBADI UMBARA"});
#line 70
 testRunner.Then("Exist following overtime data with status \"APPROVED\"", ((string)(null)), table27, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
