// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowProjectGDIApps.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ProjectCRUD")]
    public partial class ProjectCRUDFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ProjectCRUD.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ProjectCRUD", "A short summary of the feature", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Name",
                        "Description"});
            table10.AddRow(new string[] {
                        "PTVI",
                        "Vale",
                        "PT Vale Indonesia"});
            table10.AddRow(new string[] {
                        "SMI",
                        "Sampoerna",
                        "PT Sampoerna Indonesia"});
            table10.AddRow(new string[] {
                        "POI",
                        "Premier Oil",
                        "PT Premier"});
#line 5
testRunner.Given("Exist Active Client data in following", ((string)(null)), table10, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("See Client project List")]
        [NUnit.Framework.CategoryAttribute("manual")]
        public virtual void SeeClientProjectList()
        {
            string[] tagsOfScenario = new string[] {
                    "manual"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("See Client project List", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 12
 testRunner.When("User pick client with code \"PTVI\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("User can see projects belong to \"PTVI\" Projects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Add new Project")]
        [NUnit.Framework.CategoryAttribute("manual")]
        public virtual void AddNewProject()
        {
            string[] tagsOfScenario = new string[] {
                    "manual"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new Project", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 17
testRunner.When("User pick client with code \"PTVI\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Label",
                            "Input"});
                table11.AddRow(new string[] {
                            "Code",
                            "ODS"});
                table11.AddRow(new string[] {
                            "Name",
                            "ODS"});
                table11.AddRow(new string[] {
                            "Description",
                            "untuk monitor data"});
                table11.AddRow(new string[] {
                            "ProjectOwner",
                            "Aan"});
                table11.AddRow(new string[] {
                            "ProjectManager",
                            "Aminullah"});
                table11.AddRow(new string[] {
                            "NominalValue",
                            "345000000"});
                table11.AddRow(new string[] {
                            "DurationDays",
                            "120"});
                table11.AddRow(new string[] {
                            "EstimatedStartDate",
                            "12-Jan-2022"});
                table11.AddRow(new string[] {
                            "EstimatedEndDate",
                            "14-Mar-2022"});
                table11.AddRow(new string[] {
                            "ActualStartDate",
                            "15-Jan-2022"});
                table11.AddRow(new string[] {
                            "ActualEndDate",
                            "9-Mar-2022"});
#line 18
testRunner.And("Add following project input", ((string)(null)), table11, "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code",
                            "Name",
                            "ClientCode",
                            "ClientName",
                            "Description",
                            "ProjectOwner",
                            "ProjectManager",
                            "NominalValue",
                            "DurationDays",
                            "EstimatedStartDate",
                            "EstimatedEndDate",
                            "ActualStartDate",
                            "ActualEndDate"});
                table12.AddRow(new string[] {
                            "ODS",
                            "ODS",
                            "PTVI",
                            "Vale",
                            "untuk monitor data",
                            "Aan",
                            "Aminullah",
                            "345000000",
                            "120",
                            "12-Jan-2022",
                            "14-Mar-2022",
                            "15-Jan-2022",
                            "9-Mar-2022"});
#line 31
testRunner.Then("Exist the inputed data projects with code \"PTVI\"", ((string)(null)), table12, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
